CART DROPDOWN IMPLEMENTATION PROMPT
===================================

CURRENT ISSUE:
The shopping cart dropdown in the Navbar currently shows hardcoded/static sample items instead of displaying the actual items from the user's cart stored in the database.

OBJECTIVE:
Update the Navbar cart dropdown to dynamically display real cart items from the Zustand store (which fetches from MongoDB), with proper functionality for viewing items, updating quantities, removing items, and navigating to the cart page.

REQUIRED FUNCTIONALITY:
======================

1. DISPLAY REAL CART ITEMS
   - Show actual products added to cart (not hardcoded data)
   - Display product image, name, price, and quantity
   - Show accurate cart item count in badge (red circle with number)
   - Update dropdown content when items are added/removed
   - Show subtotal of all items

2. CART ITEM MANAGEMENT IN DROPDOWN
   - Remove button (×) for each item - functional
   - Display accurate quantity for each product
   - Optional: Add quantity increment/decrement buttons in dropdown
   - Show "Your cart is empty" message when no items
   - Limit dropdown height with scroll (max 300-400px) for many items

3. REAL-TIME UPDATES
   - Dropdown should reflect cart changes immediately
   - When user adds product from marketplace → dropdown updates
   - When user removes item from dropdown → updates instantly
   - Cart count badge updates in real-time
   - Subtotal recalculates automatically

4. CART BADGE (RED CIRCLE)
   - Show item count (number of products in cart)
   - Display "99+" if more than 99 items
   - Hide badge completely when cart is empty (itemCount === 0)
   - Position: top-right corner of shopping cart icon
   - Style: Red background (#ff4444), white text, 20px circle

5. SUBTOTAL CALCULATION
   - Calculate total price: sum of (price × quantity) for all items
   - Display as: "Subtotal: ₱XXX.XX"
   - Format with 2 decimal places
   - Update when items added/removed or quantities change

6. "GO TO CART" BUTTON
   - Navigate to /cart page
   - Close dropdown after clicking
   - Disable button when cart is empty (with visual indication)
   - Style: Green button matching theme (#2E3F36)

7. EMPTY CART STATE
   - Display message: "Your cart is empty"
   - Show "GO TO CART" button but disabled
   - Optional: Add "Browse Products" link to marketplace
   - Hide item list section

8. DROPDOWN UI/UX
   - Open/close on cart icon click
   - Close when clicking outside dropdown
   - Close when clicking "GO TO CART"
   - Smooth animations (fade in/out)
   - Header: "Shopping Cart" title with divider
   - Max height with scroll for long lists
   - Clean, readable layout

9. ZUSTAND STORE INTEGRATION
   - Use existing useCartStore hook
   - Available state: items, subtotal, itemCount
   - Available actions: fetchCart(), removeItem(productId), updateQuantity(productId, quantity)
   - Call fetchCart() on component mount (useEffect)
   - Store should already handle MongoDB synchronization

10. ERROR HANDLING
    - Handle failed cart fetch gracefully
    - Show error message if cart loading fails
    - Retry mechanism or fallback UI
    - Console errors for debugging
    - Don't break navbar if cart fails to load

TECHNICAL REQUIREMENTS:
======================

FILES TO UPDATE:
- src/components/Navbar.tsx (main implementation)
- src/components/Navbar.css (styling if needed)

CURRENT CART STORE STRUCTURE (useCartStore):
```typescript
interface CartItem {
  productId: string;
  name: string;
  price: number;
  quantity: number;
  image: string;
  sellerId: string;
}

interface CartStore {
  items: CartItem[];
  subtotal: number;
  itemCount: number;
  fetchCart: () => Promise<void>;
  addItem: (item: CartItem) => Promise<void>;
  removeItem: (productId: string) => Promise<void>;
  updateQuantity: (productId: string, quantity: number) => Promise<void>;
  clearCart: () => Promise<void>;
}
```

IMPLEMENTATION CHECKLIST:
========================

[ ] Remove hardcoded cart items from Navbar.tsx
[ ] Use items array from useCartStore instead of static data
[ ] Display dynamic item count in badge (itemCount from store)
[ ] Hide badge when itemCount === 0
[ ] Map through items array to display each cart item
[ ] Show product image, name, price, quantity for each item
[ ] Implement functional remove button (call removeItem from store)
[ ] Display calculated subtotal from store
[ ] Show "Your cart is empty" when items.length === 0
[ ] Disable "GO TO CART" button when cart is empty
[ ] Ensure fetchCart() is called on component mount
[ ] Test: Add product → check dropdown shows it
[ ] Test: Remove from dropdown → check it disappears
[ ] Test: Badge count matches actual items
[ ] Test: Subtotal calculation is correct
[ ] Test: Empty cart shows proper message
[ ] Test: Clicking outside closes dropdown
[ ] Test: Navigation to /cart works

DESIGN SPECIFICATIONS:
=====================

Cart Badge:
- Background: #ff4444 (red)
- Color: white
- Border radius: 50% (circle)
- Size: 20px × 20px
- Position: absolute, top: -8px, right: -8px
- Font size: 12px
- Font weight: bold
- Display: flex, align-items: center, justify-content: center
- Show "99+" if itemCount > 99
- Hide completely (display: none) if itemCount === 0

Cart Dropdown:
- Width: 320px
- Max height: 400px (with scroll for items)
- Background: white
- Border radius: 8px
- Box shadow: 0 4px 12px rgba(0,0,0,0.15)
- Padding: 16px
- Position: absolute, right: 0, top: 50px
- Z-index: 100

Cart Item in Dropdown:
- Display: flex
- Gap: 12px
- Padding: 12px 0
- Border bottom: 1px solid #e5e7eb (except last item)
- Image: 60px × 60px, object-fit: cover, border-radius: 4px
- Item info: flex: 1
- Remove button: color #ff4444, cursor pointer, font-size 18px

"GO TO CART" Button:
- Background: #2E3F36 (dark green)
- Color: white
- Padding: 12px
- Border radius: 8px
- Width: 100%
- Font weight: 600
- Cursor: pointer
- Hover: background #24352c
- Disabled: opacity 0.5, cursor not-allowed

Empty State:
- Text align: center
- Color: #6b7280 (gray)
- Padding: 24px 0
- Font size: 14px

EXAMPLE CODE STRUCTURE:
======================

```typescript
const { items, subtotal, itemCount, fetchCart, removeItem } = useCartStore();

useEffect(() => {
  fetchCart();
}, [fetchCart]);

// In JSX for badge:
{itemCount > 0 && (
  <span className="cart-badge">
    {itemCount > 99 ? '99+' : itemCount}
  </span>
)}

// In dropdown:
{items.length === 0 ? (
  <p className="empty-cart">Your cart is empty</p>
) : (
  <>
    <div className="cart-items-list">
      {items.map((item) => (
        <div key={item.productId} className="cart-item">
          <img src={item.image} alt={item.name} />
          <div className="cart-item-info">
            <p className="item-name">{item.name}</p>
            <p className="item-price">
              ₱{item.price.toFixed(2)} x {item.quantity}
            </p>
          </div>
          <button onClick={() => removeItem(item.productId)}>×</button>
        </div>
      ))}
    </div>
    <div className="cart-subtotal">
      Subtotal: ₱{subtotal.toFixed(2)}
    </div>
  </>
)}
```

TESTING SCENARIOS:
==================

1. Empty Cart:
   - Open dropdown → Should show "Your cart is empty"
   - Cart badge should be hidden
   - "GO TO CART" button should be disabled

2. Add Items:
   - Add product from marketplace
   - Open dropdown → Should show the product
   - Badge should show "1"
   - Subtotal should match product price × quantity

3. Multiple Items:
   - Add 3-5 different products
   - Badge should show correct count
   - Dropdown should list all items
   - Subtotal should be sum of all items

4. Remove Item:
   - Click × button in dropdown
   - Item should disappear immediately
   - Badge count should decrease
   - Subtotal should recalculate

5. Navigate to Cart:
   - Click "GO TO CART" button
   - Should navigate to /cart page
   - Dropdown should close
   - Cart page should show same items

6. Quantity Changes:
   - Change quantity in main cart page
   - Go back to marketplace
   - Open dropdown → Should reflect new quantities
   - Subtotal should match new calculation

7. Large Cart:
   - Add 10+ items
   - Dropdown should scroll
   - Badge should show "10" or higher
   - All items should be accessible via scroll

NOTES:
======

- The cart store is already connected to MongoDB via API routes
- fetchCart() handles fetching from database
- removeItem() updates both frontend and backend
- Don't need to manually sync - store handles it
- Current hardcoded items in Navbar.tsx need to be completely removed
- The dropdown already has most of the styling - just needs dynamic data
- Make sure to test with both logged-in users and guest sessions

PRIORITY: HIGH
This is a critical UX issue where users see fake data instead of their real cart contents.

SUCCESS CRITERIA:
================

✅ Cart dropdown shows real items from database
✅ Badge count is accurate and hides when empty
✅ Remove button works and updates immediately
✅ Subtotal calculation is correct
✅ Empty state displays properly
✅ "GO TO CART" button disabled when empty
✅ No console errors or warnings
✅ Smooth user experience with instant updates
✅ Works for both logged-in and guest users
✅ Dropdown closes properly after actions
