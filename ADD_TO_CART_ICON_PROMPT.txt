ADD TO CART ICON IMPLEMENTATION PROMPT
======================================

OBJECTIVE:
Add a shopping cart icon/button to the upper left corner of each product card in the marketplace that allows users to quickly add products to their cart without opening the product modal.

CURRENT SITUATION:
- Marketplace displays products in a grid (4 columns)
- Each product card shows: image, name, artist, price, rating
- "View" button appears on hover at the bottom
- Users must click "View" and open modal to add to cart
- Product cards are in: src/app/marketplace/page.tsx
- Cart functionality exists in: src/store/cartStore.ts
- Navbar already shows cart count and dropdown

REQUIRED FUNCTIONALITY:
======================

1. CART ICON PLACEMENT
   - Position: Upper left corner of product card image
   - Location: Inside `.image-container` div
   - Position: absolute, top: 10px, left: 10px
   - Size: 40px Ã— 40px circular button
   - Icon: Shopping cart icon (use react-icons FaShoppingCart)
   - Z-index: Higher than product image (z-index: 10)

2. VISUAL DESIGN
   - Background: White circle with slight transparency (rgba(255, 255, 255, 0.95))
   - Icon color: Dark green (#2E3F36) to match theme
   - Box shadow: 0 2px 8px rgba(0, 0, 0, 0.15)
   - Hover state: Background changes to dark green (#2E3F36), icon becomes white
   - Transition: Smooth 0.3s ease for background and color
   - Border: Optional 1px solid rgba(0, 0, 0, 0.1)

3. ADD TO CART FUNCTIONALITY
   - On click: Add 1 quantity of product to cart
   - Use existing cartStore: `addItem()` function
   - Product data needed: productId, name, price, image, quantity (1), sellerId
   - Show visual feedback: Loading spinner during add operation
   - Success feedback: Brief animation (scale + checkmark) then return to cart icon
   - Error handling: Show error icon if add fails, return to cart icon after 2s

4. STOCK VALIDATION
   - Check if product.isAvailable && product.stock > 0
   - If out of stock: Icon is disabled (opacity 0.5, cursor not-allowed, no click)
   - If in stock but quantity in cart >= stock: Disable icon (can't add more)
   - Optional: Show "Added" checkmark if product already in cart

5. CART STORE INTEGRATION
   - Import: `import { useCartStore } from "@/store/cartStore";`
   - Get functions: `const { addItem, items } = useCartStore();`
   - Check if product in cart: `items.find(item => item.productId === product._id)`
   - Add to cart call:
     ```typescript
     await addItem({
       productId: product._id,
       name: product.name,
       price: product.price,
       quantity: 1,
       image: product.images[0] || product.thumbnailUrl,
       sellerId: product.artistId,
     });
     ```

6. LOADING & SUCCESS STATES
   - Loading: Show spinner icon instead of cart icon
   - Success: Show checkmark icon for 1 second, then return to cart icon
   - Error: Show X icon for 2 seconds, then return to cart icon
   - State management: Use React useState for each product's loading/success state

7. RESPONSIVE BEHAVIOR
   - Desktop: Icon always visible (no need to hover)
   - Mobile: Icon always visible
   - Touch devices: Tap on icon adds to cart
   - Don't interfere with "View" button functionality

8. ACCESSIBILITY
   - Button has aria-label: "Add to cart"
   - Disabled state has aria-disabled="true"
   - Keyboard accessible: Can be focused and activated with Enter/Space

9. UX CONSIDERATIONS
   - Don't open product modal when clicking cart icon
   - Stop event propagation to prevent card click events
   - Update navbar cart count immediately after adding
   - Cart dropdown should show newly added item
   - User can still click "View" to see full product details
   - Multiple rapid clicks should be prevented (disable during loading)

10. ERROR SCENARIOS TO HANDLE
    - Network error during addItem
    - Product out of stock
    - Session expired
    - Database error
    - Invalid product data

TECHNICAL REQUIREMENTS:
======================

FILES TO UPDATE:
1. src/app/marketplace/page.tsx (main implementation)
2. src/app/marketplace/marketplace.css (styling)

IMPLEMENTATION CHECKLIST:
========================

[ ] Import necessary dependencies (useState, react-icons, cartStore)
[ ] Add state management for loading/success per product
[ ] Create handleAddToCart function with error handling
[ ] Add cart icon button to product card JSX
[ ] Style cart icon button in CSS
[ ] Implement loading spinner state
[ ] Implement success checkmark animation
[ ] Implement error handling and display
[ ] Add stock validation logic
[ ] Prevent event propagation on icon click
[ ] Add disabled state for out-of-stock products
[ ] Test: Click icon adds product to cart
[ ] Test: Navbar cart count updates
[ ] Test: Cart dropdown shows new item
[ ] Test: Loading state appears during add
[ ] Test: Success animation plays
[ ] Test: Error handling works
[ ] Test: Out of stock products can't be added
[ ] Test: Multiple clicks are prevented
[ ] Test: "View" button still works independently
[ ] Test: Icon doesn't block other interactions

DESIGN SPECIFICATIONS:
=====================

Cart Icon Button:
```css
.add-to-cart-icon {
  position: absolute;
  top: 10px;
  left: 10px;
  width: 40px;
  height: 40px;
  background: rgba(255, 255, 255, 0.95);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 10;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  border: 1px solid rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
}

.add-to-cart-icon:hover:not(:disabled) {
  background: #2E3F36;
  transform: scale(1.1);
}

.add-to-cart-icon:hover:not(:disabled) svg {
  color: white;
}

.add-to-cart-icon:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.add-to-cart-icon svg {
  font-size: 18px;
  color: #2E3F36;
  transition: color 0.3s ease;
}

.add-to-cart-icon.loading svg,
.add-to-cart-icon.success svg,
.add-to-cart-icon.error svg {
  animation: none;
}

.add-to-cart-icon.success {
  background: #28a745;
}

.add-to-cart-icon.error {
  background: #dc3545;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.loading-spinner {
  animation: spin 0.6s linear infinite;
}
```

EXAMPLE CODE STRUCTURE:
======================

```typescript
// In Section component
import { FaShoppingCart, FaCheck, FaTimes, FaSpinner } from 'react-icons/fa';
import { useCartStore } from '@/store/cartStore';

// State for tracking add-to-cart operations
const [addingProduct, setAddingProduct] = useState<string | null>(null);
const [successProduct, setSuccessProduct] = useState<string | null>(null);
const [errorProduct, setErrorProduct] = useState<string | null>(null);

const { addItem } = useCartStore();

const handleAddToCart = async (product: Product, e: React.MouseEvent) => {
  e.stopPropagation(); // Prevent card click
  
  if (!product.isAvailable || product.stock === 0) return;
  if (addingProduct === product._id) return; // Prevent double-click
  
  try {
    setAddingProduct(product._id);
    
    await addItem({
      productId: product._id,
      name: product.name,
      price: product.price,
      quantity: 1,
      image: product.images[0] || product.thumbnailUrl,
      sellerId: product.artistId,
    });
    
    setAddingProduct(null);
    setSuccessProduct(product._id);
    
    setTimeout(() => {
      setSuccessProduct(null);
    }, 1000);
  } catch (error) {
    console.error('Failed to add to cart:', error);
    setAddingProduct(null);
    setErrorProduct(product._id);
    
    setTimeout(() => {
      setErrorProduct(null);
    }, 2000);
  }
};

// In JSX for each product card
<button
  className={`add-to-cart-icon ${
    addingProduct === product._id ? 'loading' : ''
  } ${successProduct === product._id ? 'success' : ''} ${
    errorProduct === product._id ? 'error' : ''
  }`}
  onClick={(e) => handleAddToCart(product, e)}
  disabled={!product.isAvailable || product.stock === 0 || addingProduct === product._id}
  aria-label="Add to cart"
>
  {addingProduct === product._id ? (
    <FaSpinner className="loading-spinner" />
  ) : successProduct === product._id ? (
    <FaCheck />
  ) : errorProduct === product._id ? (
    <FaTimes />
  ) : (
    <FaShoppingCart />
  )}
</button>
```

TESTING SCENARIOS:
==================

1. Basic Add to Cart:
   - Click cart icon on product
   - Product should be added to cart
   - Navbar cart count should increase
   - Cart dropdown should show new item

2. Loading State:
   - Click cart icon
   - Loading spinner should appear
   - Icon should be disabled during loading

3. Success Animation:
   - After successful add, checkmark appears
   - Checkmark disappears after 1 second
   - Cart icon returns

4. Error Handling:
   - Simulate API error
   - X icon should appear
   - X disappears after 2 seconds
   - User can retry

5. Out of Stock:
   - Product with stock = 0
   - Cart icon should be disabled
   - Clicking does nothing

6. Multiple Clicks:
   - Rapidly click cart icon
   - Only one add operation should occur
   - Subsequent clicks ignored during loading

7. View Button Independence:
   - Click cart icon: adds to cart
   - Click View button: opens modal
   - Both should work independently

8. Cart Persistence:
   - Add product to cart
   - Refresh page
   - Cart should still contain product

INTEGRATION POINTS:
==================

1. Cart Store (src/store/cartStore.ts):
   - addItem(item: CartItem): Promise<void>
   - items: CartItem[]
   - itemCount: number

2. Product Interface (src/app/marketplace/page.tsx):
   - _id: string
   - name: string
   - price: number
   - images: string[]
   - thumbnailUrl: string
   - artistId: string
   - stock: number
   - isAvailable: boolean

3. Navbar Component (src/components/Navbar.tsx):
   - Cart dropdown should auto-update
   - Cart count badge should update

4. MongoDB Collections:
   - Cart collection should be updated via API
   - Product stock should be validated

NOTES:
======

- Icon should be subtle but noticeable
- Don't make it too prominent (overshadow product image)
- Ensure it works on all screen sizes
- Test with slow network to verify loading state
- Ensure accessibility for screen readers
- Consider adding haptic feedback on mobile
- Optional: Add sound effect on successful add (very subtle)

PRIORITY: HIGH
This improves UX by allowing quick cart additions without opening modals.

SUCCESS CRITERIA:
================

âœ… Cart icon visible on all product cards
âœ… Icon positioned in upper left corner
âœ… Clicking icon adds product to cart
âœ… Loading state shows during add operation
âœ… Success animation plays after add
âœ… Error handling works properly
âœ… Out-of-stock products can't be added
âœ… Navbar cart count updates immediately
âœ… Cart dropdown shows new item
âœ… "View" button still works independently
âœ… No console errors or warnings
âœ… Works on desktop and mobile
âœ… Accessible via keyboard
âœ… Visual feedback is clear and smooth
